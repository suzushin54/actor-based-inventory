// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: proto/inventory/v1/inventory_service.proto

package inventoryv1connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	v1 "github.com/suzushin54/actor/based-inventory/gen/proto/inventory/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// InventoryServiceName is the fully-qualified name of the InventoryService service.
	InventoryServiceName = "proto.inventory.v1.InventoryService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// InventoryServiceGetInventoryProcedure is the fully-qualified name of the InventoryService's
	// GetInventory RPC.
	InventoryServiceGetInventoryProcedure = "/proto.inventory.v1.InventoryService/GetInventory"
)

// InventoryServiceClient is a client for the proto.inventory.v1.InventoryService service.
type InventoryServiceClient interface {
	GetInventory(context.Context, *connect_go.Request[v1.GetInventoryRequest]) (*connect_go.Response[v1.GetInventoryResponse], error)
}

// NewInventoryServiceClient constructs a client for the proto.inventory.v1.InventoryService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewInventoryServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) InventoryServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &inventoryServiceClient{
		getInventory: connect_go.NewClient[v1.GetInventoryRequest, v1.GetInventoryResponse](
			httpClient,
			baseURL+InventoryServiceGetInventoryProcedure,
			opts...,
		),
	}
}

// inventoryServiceClient implements InventoryServiceClient.
type inventoryServiceClient struct {
	getInventory *connect_go.Client[v1.GetInventoryRequest, v1.GetInventoryResponse]
}

// GetInventory calls proto.inventory.v1.InventoryService.GetInventory.
func (c *inventoryServiceClient) GetInventory(ctx context.Context, req *connect_go.Request[v1.GetInventoryRequest]) (*connect_go.Response[v1.GetInventoryResponse], error) {
	return c.getInventory.CallUnary(ctx, req)
}

// InventoryServiceHandler is an implementation of the proto.inventory.v1.InventoryService service.
type InventoryServiceHandler interface {
	GetInventory(context.Context, *connect_go.Request[v1.GetInventoryRequest]) (*connect_go.Response[v1.GetInventoryResponse], error)
}

// NewInventoryServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewInventoryServiceHandler(svc InventoryServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	inventoryServiceGetInventoryHandler := connect_go.NewUnaryHandler(
		InventoryServiceGetInventoryProcedure,
		svc.GetInventory,
		opts...,
	)
	return "/proto.inventory.v1.InventoryService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case InventoryServiceGetInventoryProcedure:
			inventoryServiceGetInventoryHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedInventoryServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedInventoryServiceHandler struct{}

func (UnimplementedInventoryServiceHandler) GetInventory(context.Context, *connect_go.Request[v1.GetInventoryRequest]) (*connect_go.Response[v1.GetInventoryResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("proto.inventory.v1.InventoryService.GetInventory is not implemented"))
}
